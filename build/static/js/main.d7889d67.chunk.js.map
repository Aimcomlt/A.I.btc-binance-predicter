{"version":3,"sources":["actions/bitcoinActions.js","App.js","serviceWorker.js","reducers/bitcoinReducer.js","reducers/brainReducer.js","reducers/rootReducer.js","Store.js","index.js"],"names":["OpenPredictionBrain","brain","NeuralNetwork","HighPredictionBrain","LowPredictionBrain","ClosePredictionBrain","OpenReAquiredTarget","OpenReAquiredTargetHG","OpenReAquiredTargetCL","OpenReAquiredTargetLW","OpenBrainResulta","OpenBrainResultb","OpenBrainResultc","OpenBrainResultd","OpenBrainResulte","OpenBrainResultf","CloseBrainResult","HighBrainResult","LowBrainResult","LayerIIOpenResult","LayerIIHighResult","LayerIILowResult","LayerIICloseResult","mouthSize","mouthCeilingSize","mouthFloorSize","TongueSize","BrOpToNewOp","BrHgToNewHg","BrLwToNewLw","BrClToNewCl","OpenMomentumX","HighMomentumX","LowMomentumX","CloseMomentumX","OpenVsMomentum","HighVsMomentum","LowVsMomentum","CloseVsMomentum","globalLength","epoxNum","reponseXopen","reponseXhigh","reponseXlow","reponseXclose","App","dispatch","useDispatch","state","useSelector","bitcoin","stateB","React","useState","num","fetchData","time","number","a","type","axios","get","responseA","i","data","length","push","DataLength","valueX","ThePrice","HighPrice","LowPrice","ClosePrice","console","log","Date","now","labels","open","high","low","close","openMA","highMA","lowMA","closeMA","CenterOpenBrain","b","c","d","f","input","hgha","hghb","hghc","hghd","hghe","hghf","lwa","lwb","lwc","lwd","lwe","lwf","cla","clb","clc","cld","cle","clf","output","opa","opb","opc","opd","ope","opf","train","iterations","errorThresh","learningRate","momentum","CenterOpenResult","run","RightHighBrain","RightHighResult","LeftLowBrain","LeftLowResult","CenterCloseBrain","CenterCloseResult","epoxResult","epoxOverFlow","Lili","gago","splice","openPriceResult","openPriceOverFlow","L","gaga","highPriceResult","highPriceOverFlow","Lh","gagaH","lowPriceResult","lowPriceOverFlow","Ll","gagaL","closePriceResult","closePriceOverFlow","Lc","gagac","openBrainResult","brOPI","AvgElem1OpenOpen","Elem1","elemOf1","elemOf1B","elemOf1C","highBrainResult","hghVSI","AvgElem2HighHigh","Elem2","elemOf2","elemOf2B","elemOf2C","lowBrainResult","lowVSI","AvgElem3LowLow","Elem3","elemOf3","elemOf3B","elemOf3C","closeBrainResult","clVSI","AvgElem4CloseClose","Elem4","elemOf4","elemOf4B","elemOf4C","LowPredicted","RealLow","HghPredicted","RealHigh","ClsPredicted","RealClose","RvsPredicted","midOP","midOPI","LayerIIOpenBrain","avergl","hghr","lwr","clr","elm1","elm2","elm3","elm4","obr","hbr","lbr","cbr","opr","e","LayerIIOPBrainResult","LayerIIHighBrainPrice","LayerIIHGBrainResult","LayerIILowBrainPrice","LayerIILWBrainResult","LayerIICloseBrainPrice","LayerIICLBrainResult","payload","getData","className","style","marginLeft","marginRight","onClick","setInterval","options","responsive","loading","height","width","dataG","dataC","dataD","dataF","dataB","Boolean","window","location","hostname","match","initalState","datasets","label","backgroundColor","borderColor","pointBorderColor","borderWidth","bitcoinReducer","action","order","Loading","scales","x","ticks","callback","value","index","values","brainReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d7889d67.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport brain from 'brain.js/src/index';\r\n\r\n// INITIALIZING FOUR NEW NEURAL NETWORK INSTANCES \r\nconst OpenPredictionBrain = new brain.NeuralNetwork();\r\nconst HighPredictionBrain = new brain.NeuralNetwork();\r\nconst LowPredictionBrain = new brain.NeuralNetwork();\r\nconst ClosePredictionBrain = new brain.NeuralNetwork();\r\n//  INITIALIZING LAYER TWO NEURAL NETWORK INSTANCES\r\nconst OpenReAquiredTarget = new brain.NeuralNetwork();\r\nconst OpenReAquiredTargetHG = new brain.NeuralNetwork();\r\nconst OpenReAquiredTargetCL = new brain.NeuralNetwork();\r\nconst OpenReAquiredTargetLW = new brain.NeuralNetwork();\r\n\r\n//const timeStamp = [];\r\n\r\n\r\n//THE A.I. PREDICTION RESULT: INITIALIZING ARRAYS OHLC\r\n\r\nconst OpenBrainResulta = [];\r\nconst OpenBrainResultb = [];\r\nconst OpenBrainResultc = [];\r\nconst OpenBrainResultd = [];\r\nconst OpenBrainResulte = [];\r\nconst OpenBrainResultf = [];\r\n\r\nconst CloseBrainResult = [];\r\nconst HighBrainResult = [];\r\nconst LowBrainResult = [];\r\n// LAYER TWO RE-AQUIRED TARGET PRICE OF ASSET OHLC\r\nconst LayerIIOpenResult = [];\r\nconst LayerIIHighResult = [];\r\nconst LayerIILowResult = [];\r\nconst LayerIICloseResult = [];\r\n//some build up arrays\r\nconst mouthSize = []; //predicted high - predicted low = difference \r\nconst mouthCeilingSize = []; //predicted high - latess market high = difference\r\nconst mouthFloorSize = []; // predicted low - latess market low = difference\r\nconst TongueSize = []; //latess market high - latess market low = difference \r\nconst BrOpToNewOp = []; //brain open prediction vs elem1 = openPrediction + open LatesMarketPrice divide by 2 for average to scope for the difference between its self(the brain output) and a new element the latess data.This way the output can be re-used in theory into a new instance of a neural networks PS: All ways make sure that a latess data is added to any formula \r\nconst BrHgToNewHg = [];\r\nconst BrLwToNewLw = [];\r\nconst BrClToNewCl = [];\r\n\r\nconst OpenMomentumX = [];\r\nconst HighMomentumX = [];\r\nconst LowMomentumX = [];\r\nconst CloseMomentumX = [];\r\n\r\nconst OpenVsMomentum = [];\r\nconst HighVsMomentum = [];\r\nconst LowVsMomentum = [];\r\nconst CloseVsMomentum = [];\r\n\r\n\r\n//INITIALIZING ARRAYS FOR THE AXIOS GET FUNCTION \r\n    //const globalValueX = [];\r\n    const globalLength = [];\r\n    const epoxNum = [];\r\n    const reponseXopen = [];\r\n    const reponseXhigh = [];\r\n    const reponseXlow = [];\r\n    const reponseXclose = [];\r\n\r\nexport const getData = ({ time, number }) => async dispatch => {\r\n  try {\r\n    dispatch({\r\n      type: \"AWAITING_BITCOIN\"\r\n    })\r\n \r\n  //THE ACTUAL IMPLEMENTATION OF THE AXIOS GET FUNCTION ***REMINDER BINANCE MAX CALL IS 500 \r\nconst responseA = await axios.get(`https://api.binance.com/api/v3/klines?symbol=BTCUSDT&interval=1m`)\r\n      for (let i = 0; i < (responseA.data.length); i++) {  \r\n        globalLength.push(responseA.data.length)\r\n        epoxNum.push(responseA.data[i][0]);\r\n        reponseXopen.push(responseA.data[i][1]);\r\n        reponseXhigh.push(responseA.data[i][2]);\r\n        reponseXlow.push(responseA.data[i][3]);\r\n        reponseXclose.push(responseA.data[i][4]);\r\n       \r\n      }\r\n const DataLength = epoxNum.length - 1;\r\n   let valueX = reponseXopen.length - 1;\r\n\r\n  \r\n  \r\n    //INITIALIZE SOME ARRAYS FOR TASKS\r\n\r\nconst ThePrice = [];\r\nconst HighPrice = [];\r\nconst LowPrice = [];\r\nconst ClosePrice = [];\r\n\r\nconsole.log(epoxNum.length)\r\nconsole.log(globalLength[0], 'ClosePrice: ', ClosePrice)\r\n\r\n//THE TASKS TO PROPOGATE THE DATA FOR THOSE INITIAL ARRAYS \r\n\r\n      ThePrice.push(reponseXopen[valueX]);   \r\n      HighPrice.push(reponseXhigh[valueX]);  \r\n      LowPrice.push(reponseXlow[valueX]); \r\n      ClosePrice.push(reponseXclose[499]);\r\n\r\n\r\n      console.log(ThePrice)\r\n      console.log(HighPrice);\r\n      console.log(LowPrice);\r\n      console.log(ClosePrice);\r\n\r\n\r\n// CONSOLE LOG ANY THING THAT MIGHT HELP YOU BUILD A BETTER FUTUR \r\nconsole.log(Date.now())\r\nconsole.log('OPEN PRICE: ',reponseXopen[0], '-: ', reponseXopen[valueX]);\r\nconsole.log('HIGH PRICE: ',reponseXhigh[0], '-: ', reponseXhigh[valueX]);\r\nconsole.log('LOW PRICE: ',reponseXlow[0], '-: ', reponseXlow[valueX]);\r\nconsole.log('CLOSE PRICE: ',reponseXclose[0], '-: ', reponseXclose[valueX]);\r\n \r\n// INITIALIZING MORE ARRAYS FOR MORE TASKS \r\n    const labels = [];\r\n\r\n    //THE CHART'S KLINE ARRAYS\r\n    const open = [];\r\n    const high = [];\r\n    const low = [];\r\n    const close = [];\r\n\r\n//INITIALIZING MOVING AVERAGE ARRAYS\r\n    const openMA = [];\r\n    const highMA = [];\r\n    const lowMA = [];\r\n    const closeMA = [];\r\n\r\n//TASK TO PROPOGATE THE KLINE DATA TO THE CHART\r\n    for (let i = 0; i < (reponseXopen.length); i++) {\r\n    \r\n      highMA.push(reponseXhigh[i]) //For task check: this:)\r\n      labels.push(epoxNum[i]) //For task check: this:)\r\n      open.push(reponseXopen[i]) //For task check: this:)\r\n      high.push(reponseXhigh[ i]) //For task check: this:)\r\n      close.push(reponseXclose[i]) //For task check: this:)\r\n      low.push(reponseXlow[i]) //For task check: this:) line...to be continued...\r\n\r\n\r\n      openMA.push(reponseXopen[i])\r\n      highMA.push(reponseXhigh[i])\r\n      lowMA.push(reponseXlow[i])\r\n      closeMA.push(reponseXclose[i])\r\n      \r\n             \r\n\r\n      if (i === (number - 1)) {\r\n        break;\r\n      }\r\n    }\r\n \r\n\r\n////////////////////////////////******//BEGINING OF THE NEURAL NETWORK//*********\r\n\r\n// THE OPEN PRICE NEURAL NETWORK PREDICTION BRAIN #1\r\n    const CenterOpenBrain = [];\r\n    for (let i = 0; i < reponseXopen.length; i++) {\r\n    var a = i + 5;\r\n    if (a > reponseXopen.length-1) { a = i };\r\n    var b = i + 4;\r\n    if (b > reponseXopen.length-1) { b = i };\r\n    var c = i + 3;\r\n    if (c > reponseXopen.length-1) { c = i };\r\n    var d = i + 2;\r\n    if (d > reponseXopen.length-1) { d = i };\r\n    var f = i + 1;\r\n    if (f > reponseXopen.length-1) { f = i };\r\n\r\n      CenterOpenBrain.push({\r\n\t\t  input: {\r\n\t\t\t    hgha: reponseXhigh[a] * 0.00001,\r\n          hghb: reponseXhigh[b] * 0.00001,\r\n          hghc: reponseXhigh[c] * 0.00001,\r\n          hghd: reponseXhigh[d] * 0.00001,\r\n          hghe: reponseXhigh[f] * 0.00001,\r\n          hghf: reponseXhigh[i] * 0.00001,\r\n\t\t\t     lwa: reponseXlow[a] * 0.00001,\r\n           lwb: reponseXlow[b] * 0.00001,\r\n           lwc: reponseXlow[c] * 0.00001,\r\n           lwd: reponseXlow[d] * 0.00001,\r\n           lwe: reponseXlow[f] * 0.00001,\r\n           lwf: reponseXlow[i] * 0.00001,\r\n\t\t\t     cla: reponseXclose[a] * 0.00001,\r\n           clb: reponseXclose[b] * 0.00001,\r\n           clc: reponseXclose[c] * 0.00001,\r\n           cld: reponseXclose[d] * 0.00001,\r\n           cle: reponseXclose[f] * 0.00001,\r\n           clf: reponseXclose[i] * 0.00001,\r\n\t\t\t      },\r\n\t\t  output: {\r\n\t\t\t  opa: reponseXopen[a] * 0.00001,\r\n        opb: reponseXopen[b] * 0.00001,\r\n        opc: reponseXopen[c] * 0.00001,\r\n        opd: reponseXopen[d] * 0.00001,\r\n        ope: reponseXopen[f] * 0.00001,\r\n        opf: reponseXopen[i] * 0.00001,\r\n\t\t\t\t\t}\r\n        })\r\n      }\r\n      console.log('BRAIN OPEN PRICE TRAINING ARRAY : ', CenterOpenBrain)\r\n\r\n      OpenPredictionBrain.train(CenterOpenBrain, {\r\n        iterations: 20500,\r\n        errorThresh: 0.0005,\r\n        log: false,\r\n        learningRate: 0.3,\r\n        momentum: 0.08\r\n           });\r\n\r\n           const CenterOpenResult = OpenPredictionBrain.run({\r\n\r\n                   hgha: reponseXhigh[494] * 0.00001,\r\n                   hghb: reponseXhigh[495] * 0.00001,\r\n                   hghc: reponseXhigh[496] * 0.00001,\r\n                   hghd: reponseXhigh[497] * 0.00001,\r\n                   hghe: reponseXhigh[498] * 0.00001,\r\n                   hghf: reponseXhigh[499] * 0.00001,\r\n                    lwa: reponseXlow[494] * 0.00001,\r\n                    lwb: reponseXlow[495] * 0.00001,\r\n                    lwc: reponseXlow[496] * 0.00001,\r\n                    lwd: reponseXlow[497] * 0.00001,\r\n                    lwe: reponseXlow[498] * 0.00001,\r\n                    lwf: reponseXlow[499] * 0.00001,\r\n                    cla: reponseXclose[494] * 0.00001,\r\n                    clb: reponseXclose[495] * 0.00001,\r\n                    clc: reponseXclose[496] * 0.00001,\r\n                    cld: reponseXclose[497] * 0.00001,\r\n                    cle: reponseXclose[498] * 0.00001,\r\n                    clf: reponseXclose[499] * 0.00001,\r\n                    });\r\n\r\n// THE HIGH PRICE NEURAL NETWORK PREDICTION BRAIN #2\r\n                             const RightHighBrain = [];\r\n                             for (let i = 0; i < reponseXhigh.length; i++) {\r\n\r\n         \r\n                               RightHighBrain.push({\r\n                                input: {\r\n                                  opa: reponseXopen[a] * 0.00001,\r\n                                  opb: reponseXopen[b] * 0.00001,\r\n                                  opc: reponseXopen[c] * 0.00001,\r\n                                  opd: reponseXopen[d] * 0.00001,\r\n                                  ope: reponseXopen[f] * 0.00001,\r\n                                  opf: reponseXopen[i] * 0.00001,\r\n                                   lwa: reponseXlow[a] * 0.00001,\r\n                                   lwb: reponseXlow[b] * 0.00001,\r\n                                   lwc: reponseXlow[c] * 0.00001,\r\n                                   lwd: reponseXlow[d] * 0.00001,\r\n                                   lwe: reponseXlow[f] * 0.00001,\r\n                                   lwf: reponseXlow[i] * 0.00001,\r\n                                   cla: reponseXclose[a] * 0.00001,\r\n                                   clb: reponseXclose[b] * 0.00001,\r\n                                   clc: reponseXclose[c] * 0.00001,\r\n                                   cld: reponseXclose[d] * 0.00001,\r\n                                   cle: reponseXclose[f] * 0.00001,\r\n                                   clf: reponseXclose[i] * 0.00001,\r\n                                    },\r\n                              output: {\r\n                                hgha: reponseXhigh[a] * 0.00001,\r\n                                hghb: reponseXhigh[b] * 0.00001,\r\n                                hghc: reponseXhigh[c] * 0.00001,\r\n                                hghd: reponseXhigh[d] * 0.00001,\r\n                                hghe: reponseXhigh[f] * 0.00001,\r\n                                hghf: reponseXhigh[i] * 0.00001,\r\n                                  }\r\n                               })\r\n                             }\r\n                             console.log('BRAIN HIGH PRICE TRAINING ARRAY : ', RightHighBrain)\r\n                      \r\n                             HighPredictionBrain.train(RightHighBrain, {\r\n                                 errorThresh: 0.0005,\r\n                                 log: true, \r\n                                 learningRate: 0.3,\r\n                                 momentum: 0.08\r\n                                });\r\n                                const RightHighResult = HighPredictionBrain.run({\r\n         \r\n                                  opa: reponseXopen[494] * 0.00001,\r\n                                  opb: reponseXopen[495] * 0.00001,\r\n                                  opc: reponseXopen[496] * 0.00001,\r\n                                  opd: reponseXopen[497] * 0.00001,\r\n                                  ope: reponseXopen[498] * 0.00001,\r\n                                  opf: reponseXopen[499] * 0.00001,\r\n                                   lwa: reponseXlow[494] * 0.00001,\r\n                                   lwb: reponseXlow[495] * 0.00001,\r\n                                   lwc: reponseXlow[496] * 0.00001,\r\n                                   lwd: reponseXlow[497] * 0.00001,\r\n                                   lwe: reponseXlow[498] * 0.00001,\r\n                                   lwf: reponseXlow[499] * 0.00001,\r\n                                   cla: reponseXclose[494] * 0.00001,\r\n                                   clb: reponseXclose[495] * 0.00001,\r\n                                   clc: reponseXclose[496] * 0.00001,\r\n                                   cld: reponseXclose[497] * 0.00001,\r\n                                   cle: reponseXclose[498] * 0.00001,\r\n                                   clf: reponseXclose[499] * 0.00001,\r\n                                 });\r\n\r\n // THE LOW PRICE NEURAL NETWORK PREDICTION BRAIN #3\r\n                    const LeftLowBrain = [];\r\n                    for (let i = 0; i < reponseXlow.length; i++) {\r\n\r\n                      LeftLowBrain.push({\r\n                        input: {\r\n                          opa: reponseXopen[a] * 0.00001,\r\n                          opb: reponseXopen[b] * 0.00001,\r\n                          opc: reponseXopen[c] * 0.00001,\r\n                          opd: reponseXopen[d] * 0.00001,\r\n                          ope: reponseXopen[f] * 0.00001,\r\n                          opf: reponseXopen[i] * 0.00001,\r\n                          hgha: reponseXhigh[a] * 0.00001,\r\n                          hghb: reponseXhigh[b] * 0.00001,\r\n                          hghc: reponseXhigh[c] * 0.00001,\r\n                          hghd: reponseXhigh[d] * 0.00001,\r\n                          hghe: reponseXhigh[f] * 0.00001,\r\n                          hghf: reponseXhigh[i] * 0.00001,\r\n\r\n                           cla: reponseXclose[a] * 0.00001,\r\n                           clb: reponseXclose[b] * 0.00001,\r\n                           clc: reponseXclose[c] * 0.00001,\r\n                           cld: reponseXclose[d] * 0.00001,\r\n                           cle: reponseXclose[f] * 0.00001,\r\n                           clf: reponseXclose[i] * 0.00001,\r\n                            },\r\n                      output: {\r\n                        lwa: reponseXlow[a] * 0.00001,\r\n                        lwb: reponseXlow[b] * 0.00001,\r\n                        lwc: reponseXlow[c] * 0.00001,\r\n                        lwd: reponseXlow[d] * 0.00001,\r\n                        lwe: reponseXlow[f] * 0.00001,\r\n                        lwf: reponseXlow[i] * 0.00001,\r\n                          }\r\n                      })\r\n                    }\r\n                    console.log('BRAIN LOW PRICE TRAINING ARRAY :', LeftLowBrain)\r\n                    LowPredictionBrain.train(LeftLowBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const LeftLowResult = LowPredictionBrain.run({\r\n\r\n                        opa: reponseXopen[494] * 0.00001,\r\n                        opb: reponseXopen[495] * 0.00001,\r\n                        opc: reponseXopen[496] * 0.00001,\r\n                        opd: reponseXopen[497] * 0.00001,\r\n                        ope: reponseXopen[498] * 0.00001,\r\n                        opf: reponseXopen[499] * 0.00001,\r\n                         hgha: reponseXhigh[494] * 0.00001,\r\n                         hghb: reponseXhigh[495] * 0.00001,\r\n                         hghc: reponseXhigh[496] * 0.00001,\r\n                         hghd: reponseXhigh[497] * 0.00001,\r\n                         hghe: reponseXhigh[498] * 0.00001,\r\n                         hghf: reponseXhigh[499] * 0.00001,\r\n                         cla: reponseXclose[494] * 0.00001,\r\n                         clb: reponseXclose[495] * 0.00001,\r\n                         clc: reponseXclose[496] * 0.00001,\r\n                         cld: reponseXclose[497] * 0.00001,\r\n                         cle: reponseXclose[498] * 0.00001,\r\n                         clf: reponseXclose[499] * 0.00001,\r\n                        });\r\n\r\n// THE CLOSE PRICE NEURAL NETWORK PREDICTION BRAIN #4\r\n                    const CenterCloseBrain = [];\r\n                    for (let i = 0; i < reponseXclose.length; i++) {\r\n\r\n                      CenterCloseBrain.push({\r\n                        input: {\r\n                          opa: reponseXopen[a] * 0.00001,\r\n                          opb: reponseXopen[b] * 0.00001,\r\n                          opc: reponseXopen[c] * 0.00001,\r\n                          opd: reponseXopen[d] * 0.00001,\r\n                          ope: reponseXopen[f] * 0.00001,\r\n                          opf: reponseXopen[i] * 0.00001,\r\n                          hgha: reponseXhigh[a] * 0.00001,\r\n                          hghb: reponseXhigh[b] * 0.00001,\r\n                          hghc: reponseXhigh[c] * 0.00001,\r\n                          hghd: reponseXhigh[d] * 0.00001,\r\n                          hghe: reponseXhigh[f] * 0.00001,\r\n                          hghf: reponseXhigh[i] * 0.00001,\r\n                          lwa: reponseXlow[a] * 0.00001,\r\n                          lwb: reponseXlow[b] * 0.00001,\r\n                          lwc: reponseXlow[c] * 0.00001,\r\n                          lwd: reponseXlow[d] * 0.00001,\r\n                          lwe: reponseXlow[f] * 0.00001,\r\n                          lwf: reponseXlow[i] * 0.00001,\r\n                            },\r\n                      output: {\r\n                        cla: reponseXclose[a] * 0.00001,\r\n                        clb: reponseXclose[b] * 0.00001,\r\n                        clc: reponseXclose[c] * 0.00001,\r\n                        cld: reponseXclose[d] * 0.00001,\r\n                        cle: reponseXclose[f] * 0.00001,\r\n                        clf: reponseXclose[i] * 0.00001,\r\n                          }\r\n                      })\r\n                    }\r\n                    console.log('BRAIN CLOSE PRICE TRAINING ARRAY : ', CenterCloseBrain)\r\n                    ClosePredictionBrain.train(CenterCloseBrain, {\r\n                        errorThresh: 0.0005,\r\n                        log: true, \r\n                        learningRate: 0.3,\r\n                        momentum: 0.08\r\n                       });\r\n                       const CenterCloseResult = ClosePredictionBrain.run({\r\n\r\n                        opa: reponseXopen[494] * 0.00001,\r\n                        opb: reponseXopen[495] * 0.00001,\r\n                        opc: reponseXopen[496] * 0.00001,\r\n                        opd: reponseXopen[497] * 0.00001,\r\n                        ope: reponseXopen[498] * 0.00001,\r\n                        opf: reponseXopen[499] * 0.00001,\r\n                         hgha: reponseXhigh[494] * 0.00001,\r\n                         hghb: reponseXhigh[495] * 0.00001,\r\n                         hghc: reponseXhigh[496] * 0.00001,\r\n                         hghd: reponseXhigh[497] * 0.00001,\r\n                         hghe: reponseXhigh[498] * 0.00001,\r\n                         hghf: reponseXhigh[499] * 0.00001,\r\n                         lwa: reponseXlow[494] * 0.00001,\r\n                         lwb: reponseXlow[495] * 0.00001,\r\n                         lwc: reponseXlow[496] * 0.00001,\r\n                         lwd: reponseXlow[497] * 0.00001,\r\n                         lwe: reponseXlow[498] * 0.00001,\r\n                         lwf: reponseXlow[499] * 0.00001,\r\n                        });\r\n\r\n////////////////////////////////******//END OF THE NEURAL NETWORK//*********\r\n\r\n/////////////////////// THE FOUR MAIN PREDICTION RESULT HERE*******\r\n  OpenBrainResulta.push(CenterOpenResult.opf / 0.00001);\r\n  OpenBrainResultb.push(CenterOpenResult.opb / 0.00001);\r\n  OpenBrainResultc.push(CenterOpenResult.opc / 0.00001);\r\n  OpenBrainResultd.push(CenterOpenResult.opd / 0.00001);\r\n  OpenBrainResulte.push(CenterOpenResult.ope / 0.00001);\r\n  OpenBrainResultf.push(CenterOpenResult.opa / 0.00001);\r\n  HighBrainResult.push(RightHighResult.hghf / 0.00001);\r\n  LowBrainResult.push(LeftLowResult.lwf / 0.00001);\r\n  CloseBrainResult.push(CenterCloseResult.clf / 0.00001);\r\n  console.log(OpenBrainResulta, HighBrainResult, LowBrainResult, CloseBrainResult)\r\n\r\n\r\n\r\n\r\n  ////EPOXTIME TASK\r\n  /*\r\nconst epoxArray = [];\r\nconst epoxOverFlow = [];\r\n\r\nfor(let i = 0; i <= epoxArray.length; i++) {\r\n  var M = reponseXopen.length;\r\n  var gogo = OpenBrainResult.length;\r\nif(epoxArray.length < OpenBrainResult.length) {epoxArray.push(reponseXopen[i + M - gogo])}else{epoxArray.push(epoxArray[0])}   \r\nif(epoxArray.length === OpenBrainResult.length) {epoxArray.splice(0,epoxArray[0])} \r\n}\r\nconsole.log(\"Open Price: \", epoxArray)\r\nconsole.log(\"OP over-flow array: \", epoxOverFlow)\r\n*/\r\n////PREP OPEN PRICE FOR PREDICTION CHART TO FETCH ONLY THE LATESS PRICE \r\nconst epoxResult =[];\r\nconst epoxOverFlow =[];\r\n\r\nfor(let i = 0; i <= epoxResult.length; i++) {\r\n  var Lili = reponseXopen.length;\r\n  var gago = OpenBrainResulta.length;\r\nif(epoxResult.length < OpenBrainResulta.length) {epoxResult.push(epoxNum[i + Lili- gago])}else{epoxOverFlow.push(epoxResult[0])}   \r\nif(epoxResult.length === OpenBrainResulta.length) {epoxOverFlow.splice(0,epoxResult[0])} \r\n}\r\nconsole.log(\"Epox Number: \", epoxResult);\r\nconsole.log(\"EPX over-flow array: \", epoxOverFlow);\r\n\r\n////PREP OPEN PRICE FOR PREDICTION CHART TO FETCH ONLY THE LATESS PRICE \r\nconst openPriceResult =[];\r\nconst openPriceOverFlow =[];\r\n\r\nfor(let i = 0; i <= openPriceResult.length; i++) {\r\n  var L = reponseXopen.length;\r\n  var gaga = OpenBrainResulta.length;\r\nif(openPriceResult.length < OpenBrainResulta.length) {openPriceResult.push(reponseXopen[i + L- gaga])}else{openPriceOverFlow.push(openPriceResult[0])}   \r\nif(openPriceResult.length === OpenBrainResulta.length) {openPriceOverFlow.splice(0,openPriceResult[0])} \r\n}\r\nconsole.log(\"Open Price: \", openPriceResult);\r\nconsole.log(\"OP over-flow array: \", openPriceOverFlow);\r\n\r\n\r\n////HIGH PRICE RESULT TASK\r\nconst highPriceResult =[];\r\nconst highPriceOverFlow =[];\r\n\r\nfor(let i = 0; i <= openPriceResult.length; i++) {\r\n  var Lh = reponseXopen.length -1;\r\n  var gagaH = OpenBrainResulta.length;\r\nif(highPriceResult.length < HighBrainResult.length) {highPriceResult.push(reponseXhigh[i + Lh - gagaH])}else{highPriceOverFlow.push(highPriceResult[0])}   \r\nif(highPriceResult.length === HighBrainResult.length) {highPriceOverFlow.splice(0,highPriceResult[0])} \r\n}\r\nconsole.log(\"High Price: \", highPriceResult);\r\nconsole.log(\"HP over-flow array: \", highPriceOverFlow);\r\n\r\n////LOW PRICE RESULT TASK\r\nconst lowPriceResult =[];\r\nconst lowPriceOverFlow =[];\r\n\r\nfor(let i = 0; i <= lowPriceResult.length; i++) {\r\n  var Ll = reponseXopen.length -1;\r\n  var gagaL = LowBrainResult.length;\r\nif(lowPriceResult.length < LowBrainResult.length) {lowPriceResult.push(reponseXlow[i + Ll- gagaL])}else{lowPriceOverFlow.push(lowPriceResult[0])}   \r\nif(lowPriceResult.length === LowBrainResult.length) {lowPriceOverFlow.splice(0,lowPriceResult[0])} \r\n}\r\nconsole.log(\"Low Price: \", lowPriceResult);\r\nconsole.log(\"LP over-flow array: \", lowPriceOverFlow);\r\n\r\n////CLOSE PRICE RESULT TASK\r\nconst closePriceResult =[];\r\nconst closePriceOverFlow =[];\r\n\r\nfor(let i = 0; i <= openPriceResult.length; i++) {\r\n  var Lc = reponseXclose.length;\r\n  var gagac = OpenBrainResulta.length;\r\nif(closePriceResult.length < CloseBrainResult.length) {closePriceResult.push(reponseXclose[i + Lc- gagac])}else{closePriceOverFlow.push(closePriceResult[0])}   \r\nif(closePriceResult.length === CloseBrainResult.length) {closePriceOverFlow.splice(0,closePriceResult[0])} \r\n}\r\nconsole.log(\"Close** Price**: \", closePriceResult);\r\nconsole.log(\"CP** over-flow array: \", closePriceOverFlow);\r\n\r\n////OPEN BRAIN RESULT TASK\r\n  const openBrainResult =[];\r\n  const brOPI =[];\r\n\r\nfor(let i = 0; i < OpenBrainResulta.length; i++) {\r\n  if(openBrainResult.length <= number) {openBrainResult.push(OpenBrainResulta[i])}else{brOPI.push(openBrainResult[0])}   \r\n  if(openBrainResult.length === number) {brOPI.splice(0,openBrainResult[0])} \r\n}\r\n  console.log(\"OPEN PREDICTED; \", openBrainResult);\r\n  console.log(\"OP: \", brOPI);\r\n\r\n\r\n\r\n////PREPAIR AVERAGE BETWEEN THE ASSET OPEN PRICE AND THE OPEN PREDICTED\r\n  const AvgElem1OpenOpen = [];\r\n  const Elem1 = [];\r\nfor(let i = 0; i < OpenBrainResulta.length; i++) {\r\n  var elemOf1 = i;\r\nconsole.log(elemOf1);\r\n  let elemOf1B = openBrainResult[elemOf1] * 0.00001;\r\nconsole.log('PREDICTED OPEN: ', elemOf1B);\r\n  let elemOf1C = openPriceResult[elemOf1] * 0.00001;\r\nconsole.log('OPEN MARKET PRICE: ', elemOf1C);\r\n       Elem1.push([(elemOf1C + elemOf1B) * 0.000005] / 0.0000000001);\r\n        AvgElem1OpenOpen.push(Elem1);\r\nif(AvgElem1OpenOpen.length <= i) {AvgElem1OpenOpen.push(Elem1[i])}else{}\r\n}\r\nconsole.log(Elem1);\r\n\r\nconsole.log(AvgElem1OpenOpen);\r\n\r\n\r\n////HIGH BRAIN RESULT TASK\r\n  const highBrainResult = [];\r\n  const hghVSI = [];\r\n  \r\n  for(let i = 0; i < HighBrainResult.length; i++) {\r\n    if(highBrainResult.length <= number) {highBrainResult.push(HighBrainResult[i])}else{hghVSI.push(highBrainResult[0])}   \r\n    if(highBrainResult.length === number) {hghVSI.splice(0,highBrainResult[0])}                              \r\n    }\r\n\r\n  console.log(\"HIGH PREDICTED : \", highBrainResult);\r\n  console.log(\"HP: \", hghVSI);\r\n\r\n      ////PREPAIR AVERAGE BETWEEN THE ASSET HIGH PRICE AND THE HIGH PREDICTED\r\nconst AvgElem2HighHigh = [];\r\nconst Elem2 = [];\r\nfor(let i = 0; i < HighBrainResult.length; i++) {\r\nvar elemOf2 = i;\r\nconsole.log(elemOf2);\r\nlet elemOf2B = highBrainResult[elemOf2] * 0.00001;\r\nconsole.log('PREDICTED HIGH : ', elemOf2B);\r\nlet elemOf2C = highPriceResult[elemOf2] * 0.00001;\r\nconsole.log('HIGH MARKET PRICE: ', elemOf2C);\r\nElem2.push([(elemOf2C + elemOf2B) * 0.000005] / 0.0000000001);\r\nAvgElem2HighHigh.push(Elem2);\r\nif(AvgElem2HighHigh.length <= i) {AvgElem2HighHigh.push(Elem2[i])}else{}\r\n}\r\nconsole.log(Elem2);\r\n\r\nconsole.log(AvgElem2HighHigh);\r\n\r\n////LOW BRAIN RESULT TASK \r\n  const lowBrainResult = [];\r\n  const lowVSI = [];\r\n  \r\n  for(let i = 0; i < LowBrainResult.length; i++) {\r\n    if(lowBrainResult.length <= number) {lowBrainResult.push(LowBrainResult[i])}else{lowVSI.push(lowBrainResult[0])}   \r\n    if(lowBrainResult.length === number) {lowVSI.splice(0,lowBrainResult[0])}                              \r\n      }\r\n\r\n  console.log(\"LOW PREDICTED : \", lowBrainResult);\r\n  console.log(\"LP: \",lowVSI);\r\n\r\n      ////PREPAIR AVERAGE BETWEEN THE ASSET LOW PRICE AND THE LOW PREDICTED\r\nconst AvgElem3LowLow = [];\r\nconst Elem3 = [];\r\nfor(let i = 0; i < LowBrainResult.length; i++) {\r\nvar elemOf3 = i;\r\nconsole.log(elemOf3);\r\nlet elemOf3B = lowBrainResult[elemOf3] * 0.00001;\r\nconsole.log('PREDICTED LOW: ', elemOf3B);\r\nlet elemOf3C = lowPriceResult[elemOf3] * 0.00001;\r\nconsole.log('LOW MARKET PRICE: ', elemOf3C);\r\nElem3.push([(elemOf3C + elemOf3B) * 0.000005] / 0.0000000001);\r\nAvgElem3LowLow.push(Elem3);\r\nif(AvgElem3LowLow.length <= i) {AvgElem3LowLow.push(Elem2[i])}else{}\r\n};\r\nconsole.log(Elem3);\r\n\r\nconsole.log(AvgElem3LowLow);\r\n\r\n\r\n\r\n\r\n\r\n////CLOSE BRAIN RESULT TASK\r\n  const closeBrainResult = [];\r\n  const clVSI = [];\r\n  \r\n  for(let i = 0; i < CloseBrainResult.length; i++) {\r\n    if(closeBrainResult.length <= number) {closeBrainResult.push(CloseBrainResult[i])}else{clVSI.push(closeBrainResult[0])}   \r\n    if(closeBrainResult.length === number) {clVSI.splice(0,closeBrainResult[0])}                              \r\n    \r\n  }\r\n  console.log(\"CLOSE PREDICTED : \", closeBrainResult);\r\n  console.log(\"CP: \",clVSI);\r\n\r\n\r\n\r\n////PREPAIR AVERAGE BETWEEN THE ASSET CLOSE PRICE AND THE CLOSE PREDICTED\r\nconst AvgElem4CloseClose = [];\r\nconst Elem4 = [];\r\n\r\nfor(let i = 0; i < closeBrainResult.length; i++) {\r\nvar elemOf4 = i;\r\nconsole.log(elemOf4);\r\nlet elemOf4B = closeBrainResult[elemOf4] * 0.00001;\r\nconsole.log('PREDICTED CLOSE: ', elemOf4B);\r\nlet elemOf4C = closePriceResult[elemOf4] * 0.00001;\r\n\r\nconsole.log('CLOSE MARKET PRICE: ', elemOf4C);\r\nElem4.push([(elemOf4B + elemOf4C) * 0.000005] / 0.0000000001);\r\nAvgElem4CloseClose.push(Elem4);\r\nif(AvgElem4CloseClose.length <= i) {AvgElem4CloseClose.push(Elem4[i])}else{}\r\n}\r\nconsole.log(Elem4);\r\n\r\nconsole.log(AvgElem4CloseClose);\r\n\r\n\r\n\r\n\r\n//console.log(\"Incomming Latess Price : \", OpenPrice)\r\nconsole.log(\"Incomming Array Length : \", DataLength)\r\n//console.log(\"ILP: \",opVSI)\r\n\r\n\r\nconsole.log(reponseXopen[valueX] - OpenBrainResulta[0])\r\n\r\n const LowPredicted = [LowBrainResult[0] - LowPrice[0]];\r\n const RealLow = [LowPrice[0] - LowBrainResult[0]];\r\n\r\n const HghPredicted = [HighBrainResult[0] - HighPrice[0]]\r\n const RealHigh = [HighPrice[0] - HighBrainResult[0]];\r\n\r\n const ClsPredicted = [CloseBrainResult[0] - ClosePrice[0]];\r\n const RealClose = [ClosePrice[0] - CloseBrainResult[0]];\r\n\r\n const RvsPredicted = [ThePrice[valueX] - OpenBrainResulta[0]];\r\n //const PvsReal = [OpenBrainResult[0] - FinalPriceArray];\r\n\r\n const midOP = [];\r\n const midOPI = [];\r\n for(let i = 0; i < highBrainResult.length; i++) {\r\n    if(midOP.length <= number-1) {midOP.push(((HighBrainResult[i] + OpenBrainResulta[i] + CloseBrainResult[i]) + LowBrainResult[i]) / 4)}else{midOPI.push(((HighBrainResult[i] + OpenBrainResulta[i] + CloseBrainResult[i]) + LowBrainResult[i]) / 4)}   \r\n    if(midOP.length === number) {midOPI.splice(0, midOP[0])}\r\n  }\r\n  console.log(\"midleLine: \",midOP)\r\n  console.log(\"midleLineI: \",midOPI)\r\n\r\n///////////////////////////////////////////////////////////////////////******BEGINNING OF LAYER TWO NEURAL NETWORK*** */\r\n// LAYER TWO  NETWORK PREDICTION BRAIN #1 OF #4  LayerIIOpenResult\r\nconst LayerIIOpenBrain = [];\r\nfor (let i = 0; i < OpenBrainResulta.length; i++) {\r\n\r\n  LayerIIOpenBrain.push({\r\n  input: {\r\n       avergl: midOP[i] * 0.00001,\r\n         hghr: highPriceResult[i] * 0.00001,\r\n          lwr: lowPriceResult[i] * 0.00001,\r\n          clr: closePriceResult[i] * 0.00001,\r\n         elm1: Elem1[i] * 0.00001,\r\n         elm2: Elem2[i] * 0.00001,\r\n         elm3: Elem3[i] * 0.00001,\r\n         elm4: Elem4[i] * 0.00001,\r\n          obr: openBrainResult[i] * 0.00001,\r\n          hbr: highBrainResult[i] * 0.00001,\r\n          lbr: lowBrainResult[i] * 0.00001,\r\n          cbr: closeBrainResult[i] * 0.00001\r\n  },\r\n  output: {\r\n         opr: openPriceResult[i] * 0.00001,\r\n         \r\n    }\r\n  })\r\n}\r\nconsole.log('LAYER TWO TARGET PRICE **OPEN** TRAINING ARRAY : ', LayerIIOpenBrain)\r\nOpenReAquiredTarget.train(LayerIIOpenBrain, {\r\n    errorThresh: 0.0005,\r\n    log: true, \r\n    learningRate: 0.3,\r\n    momentum: 0.08\r\n   });\r\n   let e = Elem1.length-1\r\n   console.log(e)\r\n   const LayerIIOPBrainResult = OpenReAquiredTarget.run(\r\n     {\r\n       avergl: midOP[e] * 0.00001,\r\n         hghr: highPriceResult[e] * 0.00001,\r\n          lwr: lowPriceResult[e] * 0.00001,\r\n          clr: closePriceResult[e] * 0.00001,\r\n         elm1: Elem1[e] * 0.00001,\r\n         elm2: Elem2[e] * 0.00001,\r\n         elm3: Elem3[e] * 0.00001,\r\n         elm4: Elem4[e] * 0.00001,\r\n          obr: openBrainResult[e] * 0.00001,\r\n          hbr: highBrainResult[e] * 0.00001,\r\n          lbr: lowBrainResult[e] * 0.00001,\r\n          cbr: closeBrainResult[e] * 0.00001\r\n    });\r\n    console.log('H: ', highPriceResult[e], 'L: ', lowPriceResult[e],  'C: ', closePriceResult[e], 'test H: ', highPriceResult)\r\n    LayerIIOpenResult.push(LayerIIOPBrainResult.opr / 0.00001);\r\n    console.log(LayerIIOPBrainResult.opr / 0.00001, '*********', LayerIIOpenResult)\r\n//////////////////////////////////////////////////////////////////////////////////////////\r\n// LAYER TWO  NETWORK PREDICTION BRAIN #2 OF #4  LayerIIHighResult\r\nconst LayerIIHighBrainPrice = [];\r\nfor (let i = 0; i < OpenBrainResulta.length; i++) {\r\n\r\n  LayerIIHighBrainPrice.push({\r\n  input: {\r\n       avergl: midOP[i] * 0.00001,\r\n         clr: closePriceResult[i] * 0.00001,\r\n          lwr: lowPriceResult[i] * 0.00001,\r\n          opr: openPriceResult[i] * 0.00001,\r\n         elm1: Elem1[i] * 0.00001,\r\n         elm2: Elem2[i] * 0.00001,\r\n         elm3: Elem3[i] * 0.00001,\r\n         elm4: Elem4[i] * 0.00001,\r\n          obr: openBrainResult[i] * 0.00001,\r\n          hbr: highBrainResult[i] * 0.00001,\r\n          lbr: lowBrainResult[i] * 0.00001,\r\n          cbr: closeBrainResult[i] * 0.00001\r\n  },\r\n  output: {\r\n    hghr: highPriceResult[i] * 0.00001,\r\n         \r\n    }\r\n  })\r\n}\r\nconsole.log('LAYER TWO TARGET PRICE **HIGH** TRAINING ARRAY : ', LayerIIHighBrainPrice)\r\nOpenReAquiredTargetHG.train(LayerIIHighBrainPrice, {\r\n    errorThresh: 0.0005,\r\n    log: true, \r\n    learningRate: 0.3,\r\n    momentum: 0.08\r\n   });\r\n   //let e = Elem1.length-1\r\n   console.log(e)\r\n   const LayerIIHGBrainResult = OpenReAquiredTargetHG.run(\r\n     {\r\n       avergl: midOP[e] * 0.00001,\r\n          clr: closePriceResult[e] * 0.00001,\r\n          lwr: lowPriceResult[e] * 0.00001,\r\n          opr: openPriceResult[e] * 0.00001,\r\n         elm1: Elem1[e] * 0.00001,\r\n         elm2: Elem2[e] * 0.00001,\r\n         elm3: Elem3[e] * 0.00001,\r\n         elm4: Elem4[e] * 0.00001,\r\n          obr: openBrainResult[e] * 0.00001,\r\n          hbr: highBrainResult[e] * 0.00001,\r\n          lbr: lowBrainResult[e] * 0.00001,\r\n          cbr: closeBrainResult[e] * 0.00001\r\n    });\r\n    console.log('H: ', highPriceResult[e], 'L: ', lowPriceResult[e],  'C: ', closePriceResult[e], 'test H: ', highPriceResult)\r\n    LayerIIHighResult.push(LayerIIHGBrainResult.hghr / 0.0001);\r\nconsole.log(' LAYER TWO HIGH RESULT: ', LayerIIHighResult)\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\n// LAYER TWO  NETWORK PREDICTION BRAIN #3 OF #4  LayerIILowResult\r\nconst LayerIILowBrainPrice = [];\r\nfor (let i = 0; i < OpenBrainResulta.length; i++) {\r\n\r\n  LayerIILowBrainPrice.push({\r\n  input: {\r\n       avergl: midOP[i] * 0.00001,\r\n         clr: closePriceResult[i] * 0.00001,\r\n          lwr: lowPriceResult[i] * 0.00001,\r\n          opr: openPriceResult[i] * 0.00001,\r\n         elm1: Elem1[i] * 0.00001,\r\n         elm2: Elem2[i] * 0.00001,\r\n         elm3: Elem3[i] * 0.00001,\r\n         elm4: Elem4[i] * 0.00001,\r\n          obr: openBrainResult[i] * 0.00001,\r\n          hbr: highBrainResult[i] * 0.00001,\r\n          lbr: lowBrainResult[i] * 0.00001,\r\n          cbr: closeBrainResult[i] * 0.00001\r\n  },\r\n  output: {\r\n    hghr: highPriceResult[i] * 0.00001,\r\n         \r\n    }\r\n  })\r\n}\r\nconsole.log('LAYER TWO TARGET PRICE **LOW** TRAINING ARRAY : ', LayerIILowBrainPrice)\r\nOpenReAquiredTargetLW.train(LayerIILowBrainPrice, {\r\n    errorThresh: 0.0005,\r\n    log: true, \r\n    learningRate: 0.3,\r\n    momentum: 0.08\r\n   });\r\n   //let e = Elem1.length-1\r\n   console.log(e)\r\n   const LayerIILWBrainResult = OpenReAquiredTargetLW.run(\r\n     {\r\n       avergl: midOP[e] * 0.00001,\r\n          clr: closePriceResult[e] * 0.00001,\r\n          lwr: lowPriceResult[e] * 0.00001,\r\n          opr: openPriceResult[e] * 0.00001,\r\n         elm1: Elem1[e] * 0.00001,\r\n         elm2: Elem2[e] * 0.00001,\r\n         elm3: Elem3[e] * 0.00001,\r\n         elm4: Elem4[e] * 0.00001,\r\n          obr: openBrainResult[e] * 0.00001,\r\n          hbr: highBrainResult[e] * 0.00001,\r\n          lbr: lowBrainResult[e] * 0.00001,\r\n          cbr: closeBrainResult[e] * 0.00001\r\n    });\r\n    console.log('H: ', highPriceResult[e], 'L: ', lowPriceResult[e],  'C: ', closePriceResult[e], 'test H: ', highPriceResult)\r\n    LayerIILowResult.push(LayerIILWBrainResult.hghr / 0.00001);\r\nconsole.log(' LAYER TWO LOW RESULT: ', LayerIILowResult);\r\n\r\n////////////////////////////////////////////////////////////////////\r\n// LAYER TWO  NETWORK PREDICTION BRAIN #2 OF #4  LayerIICloseResult\r\nconst LayerIICloseBrainPrice = [];\r\nfor (let i = 0; i < OpenBrainResulta.length; i++) {\r\n\r\n  LayerIICloseBrainPrice.push({\r\n  input: {\r\n       avergl: midOP[i] * 0.00001,\r\n         hghr: highPriceResult[i] * 0.00001,\r\n          lwr: lowPriceResult[i] * 0.00001,\r\n          opr: openPriceResult[i] * 0.00001,\r\n         elm1: Elem1[i] * 0.00001,\r\n         elm2: Elem2[i] * 0.00001,\r\n         elm3: Elem3[i] * 0.00001,\r\n         elm4: Elem4[i] * 0.00001,\r\n          obr: openBrainResult[i] * 0.00001,\r\n          hbr: highBrainResult[i] * 0.00001,\r\n          lbr: lowBrainResult[i] * 0.00001,\r\n          cbr: closeBrainResult[i] * 0.00001\r\n  },\r\n  output: {\r\n         clr: closePriceResult[i] * 0.00001,\r\n         \r\n    }\r\n  })\r\n}\r\nconsole.log('LAYER TWO TARGET PRICE **CLOSE** TRAINING ARRAY : ', LayerIICloseBrainPrice)\r\nOpenReAquiredTargetCL.train(LayerIICloseBrainPrice, {\r\n    errorThresh: 0.0005,\r\n    log: true, \r\n    learningRate: 0.3,\r\n    momentum: 0.08\r\n   });\r\n   //let e = Elem1.length-1\r\n   console.log(e)\r\n   const LayerIICLBrainResult = OpenReAquiredTargetCL.run(\r\n     {\r\n       avergl: midOP[e] * 0.00001,\r\n         hghr: highPriceResult[e] * 0.00001,\r\n          lwr: lowPriceResult[e] * 0.00001,\r\n          opr: openPriceResult[e] * 0.00001,\r\n         elm1: Elem1[e] * 0.00001,\r\n         elm2: Elem2[e] * 0.00001,\r\n         elm3: Elem3[e] * 0.00001,\r\n         elm4: Elem4[e] * 0.00001,\r\n          obr: openBrainResult[e] * 0.00001,\r\n          hbr: highBrainResult[e] * 0.00001,\r\n          lbr: lowBrainResult[e] * 0.00001,\r\n          cbr: closeBrainResult[e] * 0.00001\r\n    });\r\n    console.log('H: ', highPriceResult[e], 'L: ', lowPriceResult[e],  'C: ', closePriceResult[e], 'test H: ', highPriceResult)\r\n    LayerIICloseResult.push(LayerIICLBrainResult.clr / 0.00001);\r\nconsole.log(' LAYER TWO CLOSE RESULT: ', LayerIICloseResult);\r\n/////////////////////////////////////////////////////////////////////\r\n//////////////////////////////////////////////////************END OF LAYER TWO NEURAL NETWORK */\r\n/////////////////////////////////////////////////////////////////////\r\n//latest open price - the elem1 \r\nOpenMomentumX.push(ThePrice - Elem1[e]);\r\nconsole.log(OpenMomentumX);\r\nOpenVsMomentum.push(ThePrice - OpenBrainResulta[e]);\r\nconsole.log(OpenVsMomentum);\r\n\r\n//latess high price - the elem2\r\nHighMomentumX.push(HighPrice - Elem2[e]);\r\nconsole.log(HighMomentumX);\r\nHighVsMomentum.push(HighPrice - HighBrainResult[e]);\r\nconsole.log(HighVsMomentum);\r\n//latess low price - the elem3\r\nLowMomentumX.push(LowPrice - Elem3[e]);\r\nconsole.log(LowMomentumX);\r\nLowVsMomentum.push(LowPrice - LowBrainResult[e]);\r\nconsole.log(LowVsMomentum);\r\n//latess close price - the elem4\r\nCloseMomentumX.push(ClosePrice - Elem4[e]);\r\nconsole.log(CloseMomentumX);\r\nCloseVsMomentum.push(ClosePrice - CloseBrainResult[e]);\r\nconsole.log(CloseVsMomentum);\r\n\r\nmouthSize.push(Elem2[e]-Elem3[e]);\r\nconsole.log(mouthSize.length);\r\n\r\nmouthCeilingSize.push(HighPrice - Elem2[e]);\r\nconsole.log(mouthCeilingSize)\r\nmouthFloorSize.push(LowPrice - Elem3[e]);\r\nconsole.log(mouthFloorSize)\r\n \r\nTongueSize.push(HighPrice - LowPrice);\r\nconsole.log(TongueSize.length)\r\n\r\nBrOpToNewOp.push(Elem1[e] - OpenBrainResulta[e]);\r\nconsole.log(BrOpToNewOp);\r\n//\r\nBrHgToNewHg.push(Elem2[e] - HighBrainResult[e]);\r\nconsole.log(BrHgToNewHg);\r\n//\r\nBrLwToNewLw.push(Elem3[e] - LowBrainResult[e]);\r\nconsole.log(BrLwToNewLw);\r\n//\r\nBrClToNewCl.push(Elem4[e] - CloseBrainResult[e]);\r\nconsole.log(BrClToNewCl);\r\n \r\n/////////\r\n    dispatch({\r\n      type: \"SUCCESS_BITCOIN\",\r\n      payload: {\r\n    \r\n         \r\n         number,\r\n         midOP,\r\n       // epoxDate,\r\n        // epoxArray,\r\n        OpenVsMomentum,\r\n        HighVsMomentum,\r\n        LowVsMomentum,\r\n        CloseVsMomentum,\r\n        OpenMomentumX,\r\n        HighMomentumX,\r\n        LowMomentumX,\r\n        CloseMomentumX,\r\n        TongueSize, //THE PRICE OF ASSET HIGH vs LOW\r\n        mouthCeilingSize,//high predicted vs high latess\r\n        mouthFloorSize, //low predicted vs low latess\r\n        mouthSize, //THE BRAIN PREDICTION HIGH vs LOW\r\n        LayerIIOpenResult,\r\n        LayerIIHighResult,\r\n        LayerIILowResult,\r\n        LayerIICloseResult,\r\n\r\n         Elem1,\r\n         Elem2,\r\n         Elem3,\r\n         Elem4,\r\n         ThePrice,\r\n         epoxResult,\r\n         openPriceResult,\r\n         closePriceResult,\r\n         ClosePrice,\r\n         closeBrainResult,\r\n         highBrainResult,\r\n         lowBrainResult,\r\n         openBrainResult,\r\n    \r\n\r\n\r\n         ClsPredicted,\r\n         RealClose,\r\n\r\n         HghPredicted,\r\n         RealHigh,\r\n\r\n         LowPredicted,\r\n         RealLow,\r\n\r\n         RvsPredicted,\r\n        // PvsReal,\r\n        BrOpToNewOp,\r\n        BrHgToNewHg,\r\n        BrLwToNewLw,\r\n        BrClToNewCl,\r\n            \r\n         OpenBrainResulta,\r\n         CloseBrainResult,\r\n         HighBrainResult,\r\n         LowBrainResult,\r\n\r\n         reponseXopen,\r\n         reponseXhigh,\r\n         reponseXclose,\r\n         reponseXlow,\r\n        // epox,\r\n         open,\r\n         high,\r\n         low,\r\n         close,\r\n         labels\r\n      }\r\n    })\r\n   \r\n  } catch (e) {\r\n    dispatch({\r\n      type: \"REJECTED_BITCOIN\",\r\n    })\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n//import Iframe from 'react-iframe';\r\n//import { Linking } from 'react-native';\r\nimport './App.css';\r\nimport { Line } from 'react-chartjs-2';\r\n//import { Radar } from 'react-chartjs-2';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getData } from \"./actions/bitcoinActions\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const state = useSelector(state => state.bitcoin)\r\n  const stateB = useSelector(state => state.brain)\r\n  const [num] = React.useState(500); \r\n    \r\n  const fetchData = (time) => {\r\n    //Fetch data from redux using time\r\n    dispatch(getData({\r\n      time: time,\r\n      number: num,\r\n    }))\r\n  }\r\n///<input onChange={e => setNum(e.target.value)} />\r\nreturn (\r\n  <div className=\"App\">\r\n    <div className=\"toppageNav\">\r\n      <br />\r\n      <h1>A.I.🤖 vs Binance exchange BTC/USD Timeseries</h1>\r\n      <h1 style={{marginLeft:'13px', marginRight:'13px'}}>NEURAL NETWORK PREDICTER FUNCTION</h1>\r\n  <h5 style={{marginLeft:'25px'}}>POWERED BY BRAIN.JS, CHART JS, REDUX AND REACT APP</h5>\r\n      <br />\r\n    </div>\r\n  <div className=\"navbar\">\r\n  </div>\r\n\r\n  <div className=\"info\">\r\n  <h2>◻️Word from the developer◻️</h2>\r\n    <h4>This is were the magic🪄 begins, using brain.js neural network to predict trends📈. But truly were to start?🤔</h4>\r\n    <h4>Working with brain js transported me back when I was a kid😛 with water colors. Playing was the beginning, mixing all thoses colors and learning was the end result.</h4>\r\n    <h4>‼️Bouya‼️ 🤣I was really good at making black!🤣</h4>\r\n    \r\n    <h2>◻️Quote◻️</h2>\r\n    <h4>If one decides to clone this code solution I know all ready a lot about you.</h4>\r\n    <h4>I know your favorite type of music. It's Techno-music. And why do I know this?</h4>\r\n    <h4>Simple because the brain loves it.🥰</h4>\r\n  </div>\r\n     <div className={\"chart-wrapper\"}>\r\n     </div>\r\n        <div className={\"btns-wrapper\"}>\r\n        <div className=\"info\">\r\n        <div className=\"title\">\r\n          \r\n  </div>\r\n  <h2>🏁Start binance exchange BTC/USD timeseries session.</h2>\r\n  <button className='btns-wrapper' onClick={() => setInterval(() => {fetchData(\"1min\")}, 60100)}>⏳START 1 MIN INTERVAL</button>\r\n          <button className='btns-wrapper' onClick={(() => {fetchData()})}>🕳️INSERT TRAINNING DATA📃📃... NOW🕳️</button>\r\n          <h4>The Training array snapshot📸.</h4>\r\n         <Line \r\n         data={state.data} options={{responsive: true}}\r\n         /></div>\r\n      \r\n      \r\n        \r\n            \r\n            {state.loading && <p>Loading...</p>}\r\n          </div>\r\n\r\n      \r\n\r\n         <div className='container'>\r\n\r\n         <h3> NEURAL NETWORK PREDICTED ASSET ANALYSES </h3>\r\n         <h4>⚪ In this chart the four lines uses the neural networks predicted data price and latess market data price.</h4>\r\n         <h4>⚪ Description of the red line: neural network predicted open price is average with the latess open price then this result is substracted from its own neural predicted open.</h4>\r\n         <h4>⚪ Description of the light blue line: neural network predicted high price is average with the latess high price then this result is substracted from its own neural predicted high.</h4>\r\n         <h4>⚪ Description of the yellow line: neural network predicted low price is average with the latess low price then this result is substracted from its own neural predicted low.</h4>\r\n         <h4>⚪ Description of the blue line: neural network predicted close price is average with the latess close price then this result is substracted from its own neural predicted close.</h4>\r\n         <h4>⚪ With the mesurement of its self the result can be used to estimate, measure, or note the similarity or dissimilarity between other assets</h4>\r\n\r\n         <div className='chartBarVol' style={{height:'80%', width:'80%'}}>\r\n         <Bar\r\n         data={stateB.dataG} options={{responsive: true}}\r\n         /></div>\r\n                    <div>\r\n             <h3> NEURAL NETWORK PREDICTED ASSET ANALYSES </h3>\r\n             <h4>⚪ The yellow line is the result of the latess high - the latess low (real time stream)</h4>\r\n             <h4>⚪ The blue line is the result of the neural networks high - low (the predicted result)</h4>\r\n             <h4>⚪ This two results gives us the oppertunity to scope the past and the present.</h4>\r\n             <h4>⚪ The blue line demonstrate were the volitility should be and the yellow line demonstrates the facts</h4>\r\n             <h4>⚪ Now by mixing the predicted high with the latess high we get the brown line.</h4>\r\n             <h4>⚪ Same by mixing the predicted low with the latess low we get the orange line</h4>\r\n             <h4>⚪ To build a triggers we need to find an anomelies not any kind but re-occuring ones.</h4>\r\n             <h4>⚪ What never happens but suddenly it does? Answer: The orange never dips under the brown line.</h4>\r\n             <h4>⚪ Bouya! If you see this, your good to fire! But wait! How about risk management, let's not sentimentalize but compartmentalize</h4>\r\n             <h4>⚪ Let's call all the neural brains out there by broadcasting the neural networks result as a signature</h4>\r\n             <h4>⚪ The signature is for example ETH/USD market behavior and behavior is a question.</h4>\r\n             <h4>⚪ What happens to the asset value when the tied rises and recedes?</h4>\r\n             <h4>⚪ Can we capture the unic behavior of the asset as a self? This mesurement becomes the asset unic signature.</h4>\r\n             <h4>⚪ The output result of the force-training a.i. on it's own price array can only be replicaded by the same behavior.</h4>\r\n             <h4>⚪ When using this signature to compare diffrent assets. There are no assets that can be identical.</h4>\r\n             <h4>⚪ The secret recepe is that all the assets that most ressembles other assets will profit in value and the assets that do not ressemble the popularity will loose momentum when the tide rises and receide</h4>\r\n             <h4>⚪ The signature is the magic to compare its self with it's self but force trained identicaly to analize a different asset.</h4>\r\n             <p>⚪ The beauty of brain.js or any a.i. moch up is that for the computation to happen smoothly all the inputs must be normalized.</p>\r\n             <p>⚪ What does this actualy mean, well the brain does not look at bitcoin at 50 069.00$ it looks at it like this 0.50069</p>\r\n             <p>⚪ If ETHER for example is at 3069.00$USD it looks at it in the same way as bitcoin O.3069</p>\r\n             <p>⚪ And if some coin value is example 0.000056 the neural network normalizes it to 0.56. Code prep is required for this to happen.</p> \r\n             <h4>⚪ Ok...</h4>\r\n             \r\n\r\n             </div>\r\n                  <div className='chartGLine' style={{height:'100%', width:'fit-content(100)'}}>\r\n  \r\n         <Line \r\n         data={stateB.dataC} options={{responsive: true}}\r\n         /></div>\r\n\r\n\r\n\r\n         <div>\r\n             <h3> NEURAL NETWORK PREDICTED ASSET VALUE VERSES THE OPEN MARKET LATESS ASSET VALUE </h3>\r\n             <h4>⚪ In this explicite chart only OPEN is expose to visualy compare all the predicted result from the neural network(red line)</h4>\r\n             <h4>⚪ The predicted output determines the strength or weakness of the past market.</h4>\r\n             <h4>⚪ By introducing the latess Price it becomes obvious if the latess market prices is strong or weak and can be measured</h4>\r\n             </div>\r\n         <div className='chartBarLin' style={{height:'100%', width:'fit-content(100)'}}>\r\n\r\n         <Line \r\n         data={stateB.dataD} options={{responsive: true}}\r\n         /></div>\r\n                    <div>\r\n             <h3>NEURAL NETWORK PREDICTED ASSET ANALYSES </h3>\r\n             <h4>⚪ When we use the word predicted! All the instances of brain.js's neural networks that is used in this code solution,</h4>\r\n             <h4>⚪ with out exception⛔ is never introduce with historical data like Macd values. Let's deep dive, to explain the why.</h4>\r\n             <h4>⚪ The why comes from understanding the principal of the neural networks force trained methology.</h4>\r\n             <h4>⚪ It's good at what it does. If you want a MACD indicator the neural network will output MACD indicator values. Is that what you want?</h4>\r\n             <h4>⚪ The neural network has to be ultra compartementalize. In this solution the code is build to target the behavior of the open, high, low and close</h4>\r\n             <h4>⚪ But obviously that brain.js can be used to target indicators and there values to then mesure them agains other indicators or some dark lord methology. :)</h4>\r\n             \r\n             </div>\r\n\r\n         <div className='chartFLine' style={{height:'100%', width:'fit-content(100)'}}>\r\n  \r\n         <Line \r\n         data={stateB.dataF} options={{responsive: true}}\r\n         /></div>\r\n                                      <div>\r\n             <h3>⚪ NEURAL NETWORK PREDICTED ASSET ANALYSES </h3>\r\n             <h4>⚪ The second layer is experimental but none the less very exiting!</h4>\r\n             <h4>⚪ From neural network output♻️ to the input♻️ of a new neural network instance, one must compartmentalize brain.js into sections or categories.</h4>\r\n             <h4>⚪ The chart agglomerates the results of four neural networks instances using latess market data and latess data from the first neural network(first layer)</h4>\r\n             <h4>⚪ When you first start the interval you will notice it is calibrating it's result to target the asset. Its because the training array is very small.</h4>\r\n             <h4>⚪ As the training array increases the calibrating becomes more and more dominant. ☣️Why not let's experiment☣️.</h4>\r\n             \r\n             </div>\r\n\r\n         <div className='chartBarRadar' style={{height:'100%', width:'fit-content(100)'}}>\r\n         <Line \r\n         data={stateB.dataB} options={{responsive: true}}\r\n         /></div>\r\n\r\n         </div>\r\n          <h3 className= 'ticker-sym'> BTC/USD TICKER📈</h3>\r\n\r\n           </div>\r\n           \r\n           );\r\n          }\r\n          export default App;\r\n/*\r\n          <div>\r\n             <h3>----- NEURAL NETWORK PREDICTED ASSET ANALYSES </h3>\r\n             <h4>⚪ With humbleness to bring light were to man has gone before {`https://discord.gg/UYqAsChs`}</h4>\r\n            <Iframe url=\"https://www.youtube.com/watch?v=y_UHEy6vbv0\"\r\n        width=\"50px\"\r\n        height=\"50px\"\r\n        id=\"myId\"\r\n        className=\"myClassname\"\r\n        display=\"initial\"\r\n        position=\"center\"></Iframe>\r\n            \r\n     <button  onClick url={ () => (\"https://discord.gg/UYqAsChs\")}>CHECK MY HOME BREW HUB</button>\r\n\r\n\r\n             \r\n             </div>\r\n\r\n*/","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","//Random color generator\r\n//var r = () => Math.random() * 256 >> 0;\r\n//var color = `rgb(${r()}, ${r()}, ${r()})`;\r\n//import number from '../App'\r\nconst initalState = {\r\n  loading: false,\r\n  data: {\r\n    labels: [],\r\n    datasets: [{\r\n      type: 'line',\r\n      label: \"BTC close\",\r\n      data: [],\r\n      backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n      borderColor: 'rgba(178, 116, 0, 1)',\r\n      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n      borderWidth: 0.5\r\n    }],\r\n    \r\n  },\r\n};\r\n\r\nconst bitcoinReducer = (state = initalState, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case \"AWAITING_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n    case \"REJECTED_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n      }\r\n    case \"SUCCESS_BITCOIN\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: {\r\n          labels: payload.labels,\r\n          datasets: [{\r\n            label: \"BTC CLOSE\",\r\n            data: payload.close,\r\n            backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n            borderColor: 'rgba(178, 116, 0, 1)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n            order: 3,\r\n            borderWidth: 0.5\r\n          },\r\n          {\r\n            type: 'line',\r\n            label: \"BTC OPEN\",\r\n            data: payload.open,\r\n            backgroundColor: 'rgba(10, 204, 0, 0.3)',\r\n            borderColor: 'rgba(10, 204, 0, 1)',\r\n            pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n            order: 2,\r\n            borderWidth: 0.5\r\n          },{\r\n            type: 'line',\r\n            label: \"BTC HIGH\",\r\n            data: payload.high,\r\n            backgroundColor:'rgba(22, 91, 160, 0.9)',\r\n            borderColor: 'rgba(14, 38, 62,0.9)',\r\n            pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n            order: 4 ,\r\n            borderWidth: 0.5             \r\n          },{\r\n            type: 'line',\r\n            label: \"BTC LOW\",\r\n            data: payload.low,\r\n            backgroundColor:'rgba(246, 239, 28, 0.48)',\r\n            borderColor: 'rgba(255,255,0, 0.9)',\r\n            pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n            order: 1,\r\n            borderWidth: 0.5\r\n          }],\r\n\r\n       },\r\n\r\n        }\r\n         default: return state;\r\n          }\r\n         }\r\n          export default bitcoinReducer;\r\n      \r\n","\r\n\r\nconst initalState = {\r\n    Loading: false,\r\n    dataB: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'radar',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }]\r\n    },\r\n    dataC: {\r\n      labels: [],\r\n      datasets: [{\r\n        type: 'bar',\r\n        label: \"BOT CHART PREDICTION\",\r\n        data: [],\r\n        backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n        borderColor: 'rgba(178, 116, 0, 1)',\r\n        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        options: {\r\n          responsive: true\r\n        }\r\n      }]\r\n    },\r\n    dataD: {\r\n        labels: [],\r\n        datasets: [{\r\n          type: 'line',\r\n          label: \"Real Time vs Open Prediction\",\r\n          data: [],\r\n          backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n          borderColor: 'rgba(178, 116, 0, 1)',\r\n          pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n          options: {\r\n            scales: {\r\n                x: {\r\n                    ticks: {\r\n                        // Include a dollar sign in the ticks\r\n                        callback: function(value, index, values) {\r\n                            return '$' + value;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        }],\r\n      },\r\n      dataF: {\r\n        labels: [],\r\n        datasets: [{\r\n          type: 'line',\r\n          label: \"BOT CHART PREDICTION\",\r\n          data: [],\r\n          backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n          borderColor: 'rgba(178, 116, 0, 1)',\r\n          pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n          options: {\r\n            responsive: true\r\n          }\r\n        }],\r\n        \r\n      },\r\n      dataG: {\r\n        labels: [],\r\n        datasets: [{\r\n          type: 'line',\r\n          label: \"BOT CHART PREDICTION\",\r\n          data: [],\r\n          backgroundColor: 'rgba(226, 153, 18, 0.9)',\r\n          borderColor: 'rgba(178, 116, 0, 1)',\r\n          pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n          options: {\r\n            responsive: true\r\n          }\r\n        }],\r\n        \r\n      },  \r\n\r\n}\r\nconst brainReducer = (state = initalState, action) => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case \"AWAITING_BITCOIN\":\r\n          return {\r\n            ...state,\r\n            loading: true\r\n          }\r\n        case \"REJECTED_BITCOIN\":\r\n          return {\r\n            ...state,\r\n            loading: false,\r\n          }\r\n        case \"SUCCESS_BITCOIN\":\r\n\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                dataB: {\r\n                  labels: payload.epoxResult,\r\n                  datasets: [\r\n                    {\r\n                    type: 'line',\r\n                    label: \"OPEN PRICE FROM SECONDARY LAYER\",\r\n                    data: payload.LayerIIOpenResult,\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                    borderColor: '\trgba(255, 0, 0, 0.9)',\r\n                    pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n        \r\n                    order: 1\r\n                    },\r\n                    {\r\n                      type: 'line',\r\n                      label: \"HIGH PRICE FROM SECONDARY LAYER\",\r\n                      data: payload.LayerIIHighResult, \r\n                      backgroundColor:'rgba(0,0,255, 0.7)',\r\n                      borderColor: 'rgba(0,0,255, 0.9)',\r\n                      pointBorderColor: 'rgba(0,0,255, 0.8)',\r\n          \r\n                      order: 2\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"LOW PRICE FROM SECONDARY LAYER\",\r\n                        data: payload.LayerIILowResult,\r\n                        backgroundColor:'rgba(255,255,0, 0.8)',\r\n                        borderColor: 'rgba(255,255,0, 0.9)',\r\n                        pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n            \r\n                        order: 3\r\n                        },\r\n                    {\r\n                    type: 'line',\r\n                    label: \"CLOSE PRICE FROM SECONDARY LAYER\",\r\n                    data: payload.LayerIICloseResult,\r\n                    backgroundColor:'rgba(10, 204, 0, 0.7)',\r\n                    borderColor: 'rgba(10, 204, 0, 0.9)',\r\n                    pointBorderColor: 'rgba(10, 204, 0, 0.7)',\r\n        \r\n                    order: 4\r\n                    }\r\n                  ]\r\n                  },\r\n                dataD: {\r\n                      labels: payload.epoxResult,\r\n                      datasets: [{\r\n                        type: \"line\",\r\n                        label: \"BTC OPEN PRICE\" ,\r\n                        data: payload.openPriceResult,                        \r\n                        backgroundColor: 'rgba(0, 0, 0, 0.6)',\r\n                        borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                        pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                        order: 1,\r\n                      },\r\n                      {\r\n                        type: \"line\",\r\n                        label: \"BTC CLOSE PRICE\" ,\r\n                        data: payload.closePriceResult,                        \r\n                        backgroundColor: 'rgba(3, 3, 3, 0.6)',\r\n                        borderColor: 'rgba(0, 0, 0, 0.8)',\r\n                        pointBorderColor: 'rgba(0, 0, 0 , 0.8)',\r\n                        order: 1,\r\n                      },\r\n\r\n                      {\r\n                        type: 'line',\r\n                        label: \"PREDICTED OPEN\",\r\n                        data: payload.OpenBrainResulta,\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                        borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                        order: 5,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"PREDICTED CLOSE\",\r\n                        data: payload.CloseBrainResult,\r\n                        backgroundColor: 'rgba(0,0,255, 0.4)',\r\n                        borderColor: '\trgba(0,0,255, 0.9)',\r\n                        pointBorderColor: 'rgba(0,0,255, 1)',\r\n                        order: 4,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"PREDICTED HIGH\",\r\n                        data: payload.HighBrainResult,\r\n                        backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                        borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                        pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                        order: 6,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"PREDICTED LOW\",\r\n                        data: payload.LowBrainResult,\r\n                        backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                        borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                        order: 7,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"All 4 PREDICTED MOVING AVERAGE\",\r\n                        data: payload.midOP,\r\n                        backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n                        borderColor: 'rgba(255, 113, 16, 0.9)',\r\n                        pointBorderColor: 'rgba(255, 113, 16, 0.9)',\r\n                        order: 8,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"AVERAGE OPEN MARKET VS PREDICTED\",\r\n                        data: payload.Elem1,\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                        borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                        order: 9,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"AVERAGE HIGH MARKET VS PREDICTED\",\r\n                        data: payload.Elem2,\r\n                        backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                        borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                        pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                        order: 10,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"AVERAGE LOW MARKET VS PREDICTED\",\r\n                        data: payload.Elem3,\r\n                        backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                        borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                        order: 11,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"AVERAGE CLOSE MARKET VS PREDICTED\",\r\n                        data: payload.Elem4,\r\n                        backgroundColor: 'rgba(0,0,255, 0.4)',\r\n                        borderColor: '\trgba(0,0,255, 0.9)',\r\n                        pointBorderColor: 'rgba(0,0,255, 1)',\r\n                        order: 12,\r\n                      },\r\n                    ]\r\n                  },\r\n                  dataC: {\r\n                    labels:payload.epoxResult,\r\n                    datasets: [\r\n                    /*  {\r\n                      type: 'bar',\r\n                      label: \"Real Time vs Predicted Open \",\r\n                      data: payload.Elem1,\r\n                      backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                      borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                      order: 1\r\n                      },            \r\n                      {\r\n                      type: 'bar',\r\n                      label: \"HIGH PRICE VS PREDICTED A.I. PRICE\",\r\n                      data: payload.Elem2,\r\n                      backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                      borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                      pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                      order: 2\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"LOW PRICE VS PREDICTED A.I. PRICE\",\r\n                      data: payload.Elem3,\r\n                      backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                      borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                      order: 3\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"CLOSE PRICE VS PREDICTED A.I. PRICE\",\r\n                      data: payload.Elem4,\r\n                      backgroundColor: 'rgba(0,0,255, 0.4)',\r\n                      borderColor: '\trgba(0,0,255, 0.9)',\r\n                      pointBorderColor: 'rgba(0,0,255, 1)',\r\n                      order: 4\r\n                      },\r\n                      {\r\n                        type: 'bar',\r\n                        label: \"All 4 PREDICTED MOVING AVERAGE\",\r\n                        data: payload.midOP,\r\n                        backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n                        borderColor: 'rgba(255, 113, 16, 0.9)',\r\n                        pointBorderColor: 'rgba(255, 113, 16, 0.9)',\r\n                        order: 5,\r\n                      },\r\n                      {\r\n                        type: 'bar',\r\n                        label: \"RE-AQUIERED OPEN TARKET PRICE\",\r\n                        data: payload.LayerIIOpenResult,\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                        borderColor: '\trgba(255, 0, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                        order: 6,\r\n                      },\r\n                      {\r\n                        type: 'bar',\r\n                        label: \"RE-AQUIERED CLOSE TARKET PRICE\",\r\n                        data: payload.LayerIICloseResult,\r\n                        backgroundColor:'rgba(10, 204, 0, 0.7)',\r\n                        borderColor: 'rgba(10, 204, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(10, 204, 0, 0.7)',\r\n                        order: 7,\r\n                      },\r\n                      {\r\n                        type: 'bar',\r\n                        label: \"LOW PRICE FROM SECONDARY LAYER\",\r\n                        data: payload.LayerIILowResult,\r\n                        backgroundColor:'rgba(255,255,0, 0.8)',\r\n                        borderColor: 'rgba(255,255,0, 0.9)',\r\n                        pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n            \r\n                        order: 8,\r\n                        },\r\n                        {\r\n                          type: 'bar',\r\n                          label: \"CLOSE PRICE FROM SECONDARY LAYER\",\r\n                          data: payload.LayerIICloseResult,\r\n                          backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                          borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                          pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n              \r\n                          order: 9,\r\n                          },\r\n                      */\r\n                      {\r\n                      type: 'line',\r\n                      label: \"WIDTH VALUE OF NEURAL NETWORK HIGH AND LOW\",\r\n                      data: payload.mouthSize,\r\n                      backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                      borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                      pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                      order: 1\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"VALUE OF NEURAL NETWORK HIGH VS MARKET LATESS HIGH\",\r\n                        data: payload.mouthCeilingSize,\r\n                        backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                        borderColor: 'rgba(200,100,0, 0.9)',\r\n                        pointBorderColor: 'rgba(200,100,0, 0.9)',\r\n                        order: 2\r\n                        },\r\n                        {\r\n                          type: 'line',\r\n                          label: \"WIDTH VALUE OF NEURAL NETWORK LOW VS LATESS LOW\",\r\n                          data: payload.mouthFloorSize,\r\n                          backgroundColor:'rgba(255,55,0, 0.8)',\r\n                          borderColor: 'rgba(255,55,0, 0.9)',\r\n                          pointBorderColor: 'rgba(220,55,0, 0.9)',\r\n                          order: 3\r\n                          },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"WIDTH VALUE OF MARKET HIGH AND LOW\",\r\n                        data: payload.TongueSize,\r\n                        backgroundColor:'rgba(255,255,0, 0.8)',\r\n                        borderColor: 'rgba(255,255,0, 0.9)',\r\n                        pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n                        order: 4\r\n                        },\r\n                      /*\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Predicted High vs Real High\",\r\n                      data: payload.HghPredicted,\r\n                      backgroundColor: 'rgba(22, 91, 160, 0.9)', //blue\r\n                      borderColor: 'rgba(22, 91, 160, 0.9)',\r\n                      pointBorderColor: 'rgba(22, 91, 160, 0.9)',\r\n                      order: 6\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Real Low vs Predicted Low\",\r\n                      data: payload.RealLow,\r\n                      backgroundColor: 'rgba(0, 0, 0, 0.9)',\r\n                      borderColor: 'rgba(0, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(0, 0, 0, 0.9)',\r\n                      order: 7\r\n                      },\r\n                      {\r\n                      type: 'bar',\r\n                      label: \"Predicted Low vs Real Low\",\r\n                      data: payload.LowPredicted,\r\n                      backgroundColor: 'rgba(255, 255, 0, 0.9)',\r\n                      borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      order: 8\r\n                      }*/\r\n                    ]\r\n                   },\r\n                   dataF: {\r\n                    labels:payload.epoxResult,\r\n                    datasets: [\r\n                     {\r\n                      type: 'line',\r\n                      label: \"Real Time vs Predicted Open \",\r\n                      data: payload.Elem1,\r\n                      backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                      borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                      order: 1\r\n                      },            \r\n                      {\r\n                      type: 'line',\r\n                      label: \"HIGH PRICE VS PREDICTED A.I. PRICE\",\r\n                      data: payload.Elem2,\r\n                      backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                      borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                      pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                      order: 2\r\n                      },\r\n                      {\r\n                      type: 'line',\r\n                      label: \"LOW PRICE VS PREDICTED A.I. PRICE\",\r\n                      data: payload.Elem3,\r\n                      backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                      borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                      order: 3\r\n                      },\r\n                      {\r\n                      type: 'line',\r\n                      label: \"CLOSE PRICE VS PREDICTED A.I. PRICE\",\r\n                      data: payload.Elem4,\r\n                      backgroundColor: 'rgba(0,0,255, 0.4)',\r\n                      borderColor: '\trgba(0,0,255, 0.9)',\r\n                      pointBorderColor: 'rgba(0,0,255, 1)',\r\n                      order: 4\r\n                      },\r\n                      \r\n                      {\r\n                        type: 'line',\r\n                        label: \"All 4 PREDICTED MOVING AVERAGE\",\r\n                        data: payload.midOP,\r\n                        backgroundColor: 'rgba(255, 113, 16, 0.7)',\r\n                        borderColor: 'rgba(255, 113, 16, 0.9)',\r\n                        pointBorderColor: 'rgba(255, 113, 16, 0.9)',\r\n                        order: 5,\r\n                      },\r\n                      /*\r\n                      {\r\n                        type: 'line',\r\n                        label: \"RE-AQUIERED OPEN TARKET PRICE\",\r\n                        data: payload.LayerIIOpenResult,\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                        borderColor: '\trgba(255, 0, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                        order: 6,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"RE-AQUIERED CLOSE TARKET PRICE\",\r\n                        data: payload.LayerIICloseResult,\r\n                        backgroundColor:'rgba(10, 204, 0, 0.7)',\r\n                        borderColor: 'rgba(10, 204, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(10, 204, 0, 0.7)',\r\n                        order: 7,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"LOW PRICE FROM SECONDARY LAYER\",\r\n                        data: payload.LayerIILowResult,\r\n                        backgroundColor:'rgba(255,255,0, 0.8)',\r\n                        borderColor: 'rgba(255,255,0, 0.9)',\r\n                        pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n            \r\n                        order: 8,\r\n                        },\r\n                        {\r\n                          type: 'line',\r\n                          label: \"CLOSE PRICE FROM SECONDARY LAYER\",\r\n                          data: payload.LayerIICloseResult,\r\n                          backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                          borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                          pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n              \r\n                          order: 9,\r\n                        }\r\n                        */\r\n                    ]\r\n                  },   \r\n                  \r\n                  dataG: {\r\n                    labels:payload.epoxResult,\r\n                    datasets: [\r\n                   /*  {\r\n                      type: 'line',\r\n                      label: \"(Latess open + neural N open * 0.5) - neural N open\",\r\n                      data: payload.BrOpToNewOp,\r\n                      backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                      borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                      order: 1\r\n                      },            \r\n                      {\r\n                      type: 'line',\r\n                      label: \"(Latess high + neural N high * 0.5) - neural N high\",\r\n                      data: payload.BrHgToNewHg,\r\n                      backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                      borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                      pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                      order: 2\r\n                      },\r\n                      {\r\n                      type: 'line',\r\n                      label: \"(Latess low + neural N low * 0.5) - neural N low\",\r\n                      data: payload.BrLwToNewLw,\r\n                      backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                      borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                      pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                      order: 3\r\n                      },\r\n                      {\r\n                      type: 'line',\r\n                      label: \"(Latess close + neural N close * 0.5) - neural N close\",\r\n                      data: payload.BrClToNewCl,\r\n                      backgroundColor: 'rgba(0,0,255, 0.4)',\r\n                      borderColor: '\trgba(0,0,255, 0.9)',\r\n                      pointBorderColor: 'rgba(0,0,255, 1)',\r\n                      order: 4\r\n                      },*/\r\n                      {\r\n                        type: 'line',\r\n                        label: \"LATESS OPEN PRICE ABOVE OR BELOW ELEM-1\",\r\n                        data: payload.OpenMomentumX,\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                        borderColor: 'rgba(255, 0, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                        order: 5\r\n                        },            \r\n                        {\r\n                        type: 'line',\r\n                        label: \"LATESS HIGH PRICE ABOVE OR BELOW ELEM-2\",\r\n                        data: payload.HighMomentumX,\r\n                        backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                        borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                        pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                        order: 6\r\n                        },\r\n                        {\r\n                        type: 'line',\r\n                        label: \"LATESS LOW PRICE ABOVE OR BELOW ELEM-3\",\r\n                        data: payload.LowMomentumX,\r\n                        backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                        borderColor: 'rgba(255, 255, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                        order: 7\r\n                        },\r\n                        {\r\n                        type: 'line',\r\n                        label: \"LATESS CLOSE PRICE ABOVE OR BELOW ELEM-4\",\r\n                        data: payload.CloseMomentumX,\r\n                        backgroundColor: 'rgba(0,0,255, 0.4)',\r\n                        borderColor: '\trgba(0,0,255, 0.9)',\r\n                        pointBorderColor: 'rgba(0,0,255, 1)',\r\n                        order: 8\r\n                        },\r\n                        {\r\n                          type: 'line',\r\n                          label: \"OPEN VS MOMENTUM \",\r\n                          data: payload.OpenVsMomentum,\r\n                          backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                          borderColor: 'rgba(255, 50, 0, 0.9)',\r\n                          pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                          order: 9\r\n                          },            \r\n                          {\r\n                          type: 'line',\r\n                          label: \"HIGH VS MOMENTUM\",\r\n                          data: payload.HighVsMomentum,\r\n                          backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                          borderColor: '\trgba(22, 41, 160, 0.9)',\r\n                          pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n                          order: 10\r\n                          },\r\n                          {\r\n                          type: 'line',\r\n                          label: \"LOW VS MOMENTUM\",\r\n                          data: payload.LowVsMomentum,\r\n                          backgroundColor: 'rgba(255, 255, 0, 0.7)',\r\n                          borderColor: 'rgba(255, 41, 0, 0.9)',\r\n                          pointBorderColor: 'rgba(255, 255, 0, 1)',\r\n                          order: 11\r\n                          },\r\n                          {\r\n                          type: 'line',\r\n                          label: \"CLOSE VS MOMENTUM\",\r\n                          data: payload.CloseVsMomentum,\r\n                          backgroundColor: 'rgba(0,0,255, 0.4)',\r\n                          borderColor: '\trgba(0,41,255, 0.9)',\r\n                          pointBorderColor: 'rgba(0,0,255, 1)',\r\n                          order: 12\r\n                          },\r\n                      /*\r\n                      {\r\n                        type: 'line',\r\n                        label: \"RE-AQUIERED OPEN TARKET PRICE\",\r\n                        data: payload.LayerIIOpenResult,\r\n                        backgroundColor: 'rgba(255, 0, 0, 0.4)',\r\n                        borderColor: '\trgba(255, 0, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(25, 16, 0, 1)',\r\n                        order: 6,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"RE-AQUIERED CLOSE TARKET PRICE\",\r\n                        data: payload.LayerIICloseResult,\r\n                        backgroundColor:'rgba(10, 204, 0, 0.7)',\r\n                        borderColor: 'rgba(10, 204, 0, 0.9)',\r\n                        pointBorderColor: 'rgba(10, 204, 0, 0.7)',\r\n                        order: 7,\r\n                      },\r\n                      {\r\n                        type: 'line',\r\n                        label: \"LOW PRICE FROM SECONDARY LAYER\",\r\n                        data: payload.LayerIILowResult,\r\n                        backgroundColor:'rgba(255,255,0, 0.8)',\r\n                        borderColor: 'rgba(255,255,0, 0.9)',\r\n                        pointBorderColor: 'rgba(255,255,0, 0.9)',\r\n            \r\n                        order: 8,\r\n                        },\r\n                        {\r\n                          type: 'line',\r\n                          label: \"CLOSE PRICE FROM SECONDARY LAYER\",\r\n                          data: payload.LayerIICloseResult,\r\n                          backgroundColor: 'rgba(22, 91, 160, 0.7)',\r\n                          borderColor: '\trgba(22, 91, 160, 0.9)',\r\n                          pointBorderColor: 'rgba(22, 91, 160, 1)',\r\n              \r\n                          order: 9,\r\n                        }\r\n                        */\r\n                    ]\r\n                  },\r\n                    \r\n                }\r\n              \r\n                 default: return state;\r\n                }\r\n             }\r\n             export default brainReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport bitcoinReducer from \"./bitcoinReducer\";\r\nimport brainReducer from \"./brainReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  bitcoin: bitcoinReducer,\r\n  brain: brainReducer\r\n})\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./reducers/rootReducer\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./Store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}